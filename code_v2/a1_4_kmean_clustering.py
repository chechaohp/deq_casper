# -*- coding: utf-8 -*-
"""A1-4-Kmean-clustering.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1e7Gy9e7DbuFDL4tvgm-n8BrWIqMw7Ac9
"""

# Commented out IPython magic to ensure Python compatibility.
# %cd drive/MyDrive/Colab\ Notebooks/COMP8420

import pandas as pd
import numpy as np
from pandas import DataFrame
from typing import Tuple
from sklearn.cluster import KMeans
from sklearn.decomposition import PCA
import matplotlib.pyplot as plt

def load_data(path:str, mode:str)-> DataFrame:
    """This function load data from specific data file based on mode

    Args:
        path (str): path to folder contains data file
        mode (str): what data to be loaded

    Returns:
        DataFrame: DataFrame contains all data
    """
    assert mode in ["gsr", "pupil", "skin", "all"], f"mode should be 'gsr','pupil','all'. Not {mode}"
    # read data gsr
    if mode in ['gsr', 'all']:
        df_gsr = pd.read_excel(path+'gsr_features.xlsx',sheet_name='data')
        df_gsr.columns = ['patient'] + list(df_gsr.columns)[1:]
        if mode == 'gsr':
            return df_gsr
    # read pupil data
    if mode in ['pupil', 'all']:
        df_pupil = pd.read_excel(path+'pupil_features.xlsx',sheet_name='data')
        df_pupil.columns = ['patient'] + list(df_pupil.columns)[1:]
        if mode == 'pupil':
            return df_pupil
    # read skin temperature data
    if mode in ['skin', 'all']:
        df_skin = pd.read_excel(path+'skintemp_features.xlsx',sheet_name='data')
        df_skin.columns = ['patient'] + list(df_skin.columns)[1:]
        if mode == 'skin':
            return df_skin
    # in case of using all data, combine
    data = pd.concat([df_gsr,df_pupil,df_skin],axis = 1)
    # remove duplicated columns
    data = data.loc[:,~data.columns.duplicated()]
    return data

def df_to_xy(df:DataFrame) -> Tuple[np.ndarray, np.ndarray]:
    """Convert dataframe to X and Y array

    Args:
        df (DataFrame): [description]

    Returns:
        Tuple[np.ndarray, np.ndarray]: [description]
    """
    df = df.apply(pd.to_numeric)
    x = df.values[:,1:]
    y = df.values[:,0]
    return x,y

dataset = load_data('./data/','all')

dataset.head()

del dataset['patient']

train_x, train_y = df_to_xy(dataset)
mean_train_x = train_x.mean(axis=0)
std_train_x = train_x.std(axis=0)
normalize_train_x = (train_x - mean_train_x)/std_train_x

# fit data into kmean
kmeans = KMeans(n_clusters=4)
kmeans.fit(normalize_train_x)

# use PCA to visualize in 2D
pca = PCA(n_components=2)
pca_x = pca.fit_transform(normalize_train_x)

plt.figure(figsize=(20,10))
plt.subplot(1,2,1)
for i in range(4):
    index = np.where(kmeans.labels_ == i)[0]
    plt.scatter(pca_x[index,0],pca_x[index,1], label=str(i))
plt.title('Kmean cluster')
plt.legend()
plt.subplot(1,2,2)
for i in range(4):
    index = np.where(train_y == i)[0]
    plt.scatter(pca_x[index,0],pca_x[index,1], label=str(i))
plt.title('Original label')
plt.legend()
plt.show()

